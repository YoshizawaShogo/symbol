mod symbol_models_test {
    use hex::decode;
    use symbol::symbol::prelude::*;
    #[test]
    #[allow(non_snake_case)]
    fn AccountAddressRestrictionTransactionV1_account_address_restriction_single_1() {
        let input_payload = decode("D0000000000000007695D855CBB6CB83D5BD08E9D76145674F805D741301883387B7101FD8CA84329BB14DBF2F0B4CD58AA84CF31AC6899D134FC38FAB0E7A76F6216ACD60914ACBC266BB54A09FDD31FE0CBAA5B67A6E3FD67145A508793BA95F558BAF24A09CCE0000000001985041E0FEEEEFFEEEEFFEE0711EE7711EE77101000201000000009841E5B8E40781CF74DABF592817DE48711D778648DEAFB298F409274B52FABBFBCF7E7DF7E20DE1D0C3F657FB8595C1989059321905F681BCF47EA33BBF5E6F8298B5440854FDED").unwrap();
        let tx = AccountAddressRestrictionTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountAddressRestrictionTransactionV1_account_address_restriction_single_2() {
        let input_payload = decode("A0000000000000004E1E910A55162EA9D5E9B17EA6AB357290E97030969C2FAFC18BCF3D73E08827F0CC9A304088742D170E8B3CE1EC4AAAC813F0F7BB6C6BBAFAEBCAE9C23D4327E74A35FA0006629F5E46275AE33E1618BEAEB01F04C2F372EDE3B46A28DEE4A20000000001985041E0FEEEEFFEEEEFFEE0711EE7711EE77101C0010000000000989059321905F681BCF47EA33BBF5E6F8298B5440854FDED").unwrap();
        let tx = AccountAddressRestrictionTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountAddressRestrictionTransactionV1_account_address_restriction_aggregate_1() {
        let input_payload = decode("28010000000000006A1C14B723E973CC450165EFC629DCAC65F0A9B70517F27BD426BFEB9C21E33C91699BCDF34A0464DBA8D4A7237E4A4309139F2E9378BEC7B67C7EA1F92D5DC66CD4BB5CCA4914FD1B89BB6C90FECC1A0C661CDB98B5BB4E2A6EDA1D4B8D24230000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE771553D90AFA4B171840BCBA16DB6F82A767C98344D5F6D5F2B0B05A8902D01BD4D800000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000198504101000201000000009841E5B8E40781CF74DABF592817DE48711D778648DEAFB298F409274B52FABBFBCF7E7DF7E20DE1D0C3F657FB8595C1989059321905F681BCF47EA33BBF5E6F8298B5440854FDED").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountAddressRestrictionTransactionV1_account_address_restriction_aggregate_2() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountKeyLinkTransactionV1_account_key_link_single_1() {
        let input_payload = decode("A100000000000000F9197D11A025101D4396A3475EEBD790DC62DC63859C4FEA5DA57BE16D7BF3771AB705D063E05356AD3FBFA344425CAAB47B0831AEBB2D65A08C0C014B110C62BD7986B12118AE2F8C9885D01286742D5C62BCAC7B4B0ED10C48A4497F28E5370000000001984C41E0FEEEEFFEEEEFFEE0711EE7711EE771D56AA6EC560D5E3FE1A1447C6D5DEDED5B62B23692FF58FEDFA0A9F785DAD99301").unwrap();
        let tx = AccountKeyLinkTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountKeyLinkTransactionV1_account_key_link_single_2() {
        let input_payload = decode("A1000000000000007E87B96BC9C9481B675BF1C0DB8618E4F5AFE5E95EEF7FB37231C252BA76534A1EE392CC2210350F35E7096A43003049ADC71F48556621896014227BC1DDF54F61100E44C2CB0D4287528AC588AC451D4F60FBFD51D262C01B5CB493A6D0FFDA0000000001984C41E0FEEEEFFEEEEFFEE0711EE7711EE771E787EDC111A3A8E3E8C94DF66755065D66A34563ED09C83755C38C24D3B7F08A00").unwrap();
        let tx = AccountKeyLinkTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountKeyLinkTransactionV1_account_key_link_aggregate_1() {
        let input_payload = decode("00010000000000008FF91B4D9027D09053E39059C271A3C633B6B740D0722172FB58838A1DDBE2B472D9537151EA989AF5BF183BD1DE42CC9117F466DAC0A4F3CA5C8424A7D24938988C8CC841F8694F7A1F10846E1E654DA62381E67DDDF2A17F5E7B82981E1E810000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE7715E870D460A2A239AE83466240C3ED08742134705FB55A85E3536527D4EA072105800000000000000510000000000000000000000000000000000000000000000000000000000000000000000000000000000000001984C41D56AA6EC560D5E3FE1A1447C6D5DEDED5B62B23692FF58FEDFA0A9F785DAD9930100000000000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountKeyLinkTransactionV1_account_key_link_aggregate_2() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountMetadataTransactionV1_account_metadata_single_1() {
        let input_payload = decode("AA00000000000000A3204BB3BDBCBFEF5BA954DAB9D6AE784A84B492AA9911B533C381BBB2BBD06A36B4F623A00CA60F7BAF93CCB46441506F469EBBAF4C18352AF548E8315F4B3D662F615041C51B4605AE4A16C74416141548EDDCE012D083172921C42E80ACB20000000001984441E0FEEEEFFEEEEFFEE0711EE7711EE7719841E5B8E40781CF74DABF592817DE48711D778648DEAFB20A000000000000000A000600313233424143").unwrap();
        let tx = AccountMetadataTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountMetadataTransactionV1_account_metadata_single_2() {
        let input_payload = decode("AA0000000000000003B8387DAA75186536106B847E4AE26213EADCC166A70EAA20C2AF66646D9243D54413EBFA4BB0B614E0ADCAF2417EA350198A26F3DCDBB8B4DACCECC8B1D418C9BAC0EAA76473E39107081F6A9094771ED2F616E98E53ABD30339DF422C49840000000001984441E0FEEEEFFEEEEFFEE0711EE7711EE7719841E5B8E40781CF74DABF592817DE48711D778648DEAFB2EFCAAB0000000000FAFF0600313233424143").unwrap();
        let tx = AccountMetadataTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountMetadataTransactionV1_account_metadata_aggregate_1() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountMetadataTransactionV1_account_metadata_aggregate_2() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountMosaicRestrictionTransactionV1_account_mosaic_restriction_single_1() {
        let input_payload = decode("9800000000000000FD9028F3F1A77147A0A41A0159DC0AD8B13FDA38F7076684F769C1B0BB1CEBED212AA9D6590CE68FB976998D263A2B9C86A744215B35A2EAE02E492E4B788A748E100766561BDAEED1D75EB450C573CB8C4F4C6F48D113740EE97A12856E59CC0000000001985042E0FEEEEFFEEEEFFEE0711EE7711EE7710200010100000000E803000000000000D007000000000000").unwrap();
        let tx = AccountMosaicRestrictionTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountMosaicRestrictionTransactionV1_account_mosaic_restriction_single_2() {
        let input_payload = decode("90000000000000001EB35E0C52602BF150054BDB7B938335A7BB30311C66CEEA869F98CB8808AE214A004AFBEE92B091138C9C7969D08E7B12476C30E182644C3C2A9590BE206F7B45BA575D679443214C5E3D705A32B7873B76598931192F843690BF9EFC4466750000000001985042E0FEEEEFFEEEEFFEE0711EE7711EE77102800100000000004CCCD78612DDF5CA").unwrap();
        let tx = AccountMosaicRestrictionTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountMosaicRestrictionTransactionV1_account_mosaic_restriction_aggregate_1() {
        let input_payload = decode("F000000000000000C1BDC572211630B84D43ADFB11DA5004E42093E92CE96E144BF66E6F2A2CDDFBF5138CA52F32ED23E7D8DECDA8FFC78DFC024552CCC19D605E4F1885C74D369B969F6EA2DBFA0853910F838E4C88476847FE3359705F233C95729D89B8D716F80000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE771C9B816E2B225F39322E72150DADA9F4A8C6F46C2A429F6DF4C89776A4CA8443B48000000000000004800000000000000000000000000000000000000000000000000000000000000000000000000000000000000019850420200010100000000E803000000000000D007000000000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountMosaicRestrictionTransactionV1_account_mosaic_restriction_aggregate_2() {
        let input_payload = decode("E800000000000000AFECA8EE9220F05F8EDEC66E27F698E9D3774B40FF1ED1B2501CBDE88690A901F19F8F03006F6C96083B1B0D09CC7D9CBA77E2D6A4A59E67FB7DFE105E9DE1962A01C937F05F2E9923C6E7DFE51B3E937D989570BEB24F43A99AA96FA3FC57850000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE7713B8D31922E345C3F457E73D6DA388FA8F09E0C157AA9E77680A4EBBC3B070562400000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000198504202800100000000004CCCD78612DDF5CA").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountOperationRestrictionTransactionV1_account_operation_restriction_single_1() {
        let input_payload = decode("8C00000000000000DD7BC1EEFC484BB258024BF0CCEA65E49A83805A63948A60E52F0FD0349C731D1A9F4070FB21C1456FC8C265743BAE84D2D97A9EA3F9A2E4577B5A383C58642D4B9B7DE062070BBD7702C1128936C24F3C2B5ACB9B65D796FCBE90C0EBA23B9C0000000001985043E0FEEEEFFEEEEFFEE0711EE7711EE771044001010000000052425441").unwrap();
        let tx = AccountOperationRestrictionTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountOperationRestrictionTransactionV1_account_operation_restriction_single_2() {
        let input_payload = decode("8A000000000000003BB0589E7608A5BB4A6FC071A1CBD604DBCC4B34AFC46C97674C1AB287192DB41BF3BD7EB77DC7E68F310D4A62B81CB23511834E6BCB21048F4EA9883284D97EF579377D15EA7146434CF95636B3808CBB2D65C2D24CCB3634F451A03BEA5B760000000001985043E0FEEEEFFEEEEFFEE0711EE7711EE77104C00100000000004E42").unwrap();
        let tx = AccountOperationRestrictionTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountOperationRestrictionTransactionV1_account_operation_restriction_aggregate_1() {
        let input_payload = decode("E800000000000000645CCB69512162882D705DFB599DADD9AB082AE8BB59A9237C2819BF35F2F18ED5AE27881F79548003277B38BB7A46157EC56DC99F4E178C4DEF8090755139704DF6829E25ADBD4F88F1600BE811172C598D37D511338D1597D6EA18E1F96E100000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE771C257D6202832DE1D7C1632853DA071244EAE31867DD5AEBD2E3A2232B7772D2D40000000000000003C000000000000000000000000000000000000000000000000000000000000000000000000000000000000000198504304400101000000005242544100000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AccountOperationRestrictionTransactionV1_account_operation_restriction_aggregate_2() {
        let input_payload = decode("E800000000000000635961D27DBF6178FF952D1E98F55A09EAD1248141BC32248B29F1A7D11A6E9CE5BD011746D85D73A977046E85ADAB60547FC0FEA682E0C23286A1385B768D4CAD415D7F8D836AD64B415E239601E8D14B06E83E17BAD15E0142421FC38566B20000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE77185170A5F6579EC36FC651524D1F953744E635AEF2D890C3DD696C34F683A039140000000000000003A000000000000000000000000000000000000000000000000000000000000000000000000000000000000000198504304C00100000000004E42000000000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AddressAliasTransactionV1_address_alias_single_1() {
        let input_payload = decode("A100000000000000A2B62B8383199C1030E1231E9BDB9FA0DA44646E7ADD17C91F9136438DF16D7C629C9B6F017DD47FC0AD066C05E2E71747C7834D188665FE2B1ACC474A27741B6BAB8AC737FD4D1A9C1AAF75DFE489D7177ABD9DED3033DFF3F33F476DDF721A0000000001984E42E0FEEEEFFEEEEFFEE0711EE7711EE7714BFA5F372D55B3849841E5B8E40781CF74DABF592817DE48711D778648DEAFB201").unwrap();
        let tx = AddressAliasTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AddressAliasTransactionV1_address_alias_single_2() {
        let input_payload = decode("A100000000000000128FA50612DF89B1A99A9D2624BEC9957408CCBB0149D82B7F3EB9A7EAC05EB964CE554CA36B86C3776F1B8E584AB6431EC2A1B848B7479A5CBB53049B62218666876B4CD7DD63AD474E0512002D8285A8FB91E00EBC7D8601B3AAEC8A9DEAC60000000001984E42E0FEEEEFFEEEEFFEE0711EE7711EE7714BFA5F372D55B3849841E5B8E40781CF74DABF592817DE48711D778648DEAFB200").unwrap();
        let tx = AddressAliasTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AddressAliasTransactionV1_address_alias_aggregate_1() {
        let input_payload = decode("0001000000000000D746C915B445707307ED4533F414DF25E277820EB3C2305088A8798AB66041DA1224BE51AF9FDA79B7E9025DA21B14E1C81371440AE445EEAB0051564D6BAF76E40104507B50568280B2A135AF3D97E64D0C9CA4FF0B866B280F0E6CD302EC6A0000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE771CC226F4051790D1150EA87A77C6425DCC44CB90BB827C859F57CD2963147788F5800000000000000510000000000000000000000000000000000000000000000000000000000000000000000000000000000000001984E424BFA5F372D55B3849841E5B8E40781CF74DABF592817DE48711D778648DEAFB20100000000000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AddressAliasTransactionV1_address_alias_aggregate_2() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AggregateBondedTransactionV1_aggregate_bonded_aggregate_1() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AggregateBondedTransactionV2_aggregate_bonded_aggregate_2() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AggregateCompleteTransactionV1_aggregate_complete_aggregate_1() {
        let input_payload = decodeunwrap();
        let tx = AggregateCompleteTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn AggregateCompleteTransactionV2_aggregate_complete_aggregate_2() {
        let input_payload = decodeunwrap();
        let tx = AggregateCompleteTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn HashLockTransactionV1_hash_lock_single_1() {
        let input_payload = decode("B800000000000000DCE85092A4AA448260E9C849FBC5FA51CA92BF90DFD1831FBFBE44D0B7FB4973E243B0D651CD5DC0EE35EC60472C1598C0BF182B344FD80D26938E3DFF5F9491DE254F0E4D31159CC5B32D0ABDAFE2FA96255BB8F5879717BC92ED9E799A5F970000000001984841E0FEEEEFFEEEEFFEE0711EE7711EE77144B262C46CEABB85809698000000000064000000000000008498B38D89C1DC8A448EA5824938FF828926CD9F7747B1844B59B4B6807E878B").unwrap();
        let tx = HashLockTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn HashLockTransactionV1_hash_lock_aggregate_1() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicAddressRestrictionTransactionV1_mosaic_address_restriction_single_1() {
        let input_payload = decode("B800000000000000D540747095A39055383EA6A199959BE21A43DC6324DFD215EBE2888904D6F5D6F61D259D84456DC6D731DABBCFD26C747E4A80970D56C1741D82FFE9CDB0E540FA51BA3A392F60D62EEB84BBB8CBB5311A1749E5AF6A687F434EF79D97A324C10000000001985142E0FEEEEFFEEEEFFEE0711EE7711EE7710100000000000000EFCAAB9078563412090000000000000008000000000000009841E5B8E40781CF74DABF592817DE48711D778648DEAFB2").unwrap();
        let tx = MosaicAddressRestrictionTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicAddressRestrictionTransactionV1_mosaic_address_restriction_aggregate_1() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicAliasTransactionV1_mosaic_alias_single_1() {
        let input_payload = decode("91000000000000008D5BDBFC1344DA6738E928C2547B8422D34AAB8AA80E77E9657AEC80937DA19D782F837545CFF48DD4880D08C35B7C39119B9F75F3E50DFAB0D917D4D2598BF06A4D9F52A9C07A3782571FBB88EEFFB40E2DA1E2C765D8FE062796E255B0BDA50000000001984E43E0FEEEEFFEEEEFFEE0711EE7711EE771A487791451FDF1B60A0000000000000001").unwrap();
        let tx = MosaicAliasTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicAliasTransactionV1_mosaic_alias_single_2() {
        let input_payload = decode("91000000000000006B1750C3D6F272C316EBB3916E177F2DAF2F6837CF43201A631059D02EC0FFCC554C2C64E9AB10F6B154EFE152DAAA04CCA11082DB6E81EA411E7E416A29814269F83B2313C35E758B70361E9B0C3560C5C7A182E504BDC663DBAE6500E4D1060000000001984E43E0FEEEEFFEEEEFFEE0711EE7711EE7712AD8FC018D9A49E14CCCD78612DDF5CA00").unwrap();
        let tx = MosaicAliasTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicAliasTransactionV1_mosaic_alias_aggregate_1() {
        let input_payload = decode("F000000000000000F620B8DC54CA880724AAD84C1B4D260D02DE838AA661995ED90FEF2425EC29C948C0BC68D09B09B956CA0A4457ED85B26F246F6C0471D830F74B8A776438BAA81FAC82F9AFF382D692499D106910F8EAA5A940BD3C243A51D562958E8A3709270000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE7712FDCAABBB776C8A409B39AB27525383DC06A271643372B03F622F886C08B44B64800000000000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000001984E43A487791451FDF1B60A000000000000000100000000000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicAliasTransactionV1_mosaic_alias_aggregate_2() {
        let input_payload = decode("F000000000000000072AD7B3441046032836E13A21FF0591FFCFCCB6B80CC99BBA4EA0291B1E13830560B3BD33E1D2368C4CAD9FFC812A7F64A6029774DDA784F25290B54059CF88A4C88C079FA8ECF3A7C6FC46731E9A6ECE4D4657D3162CC7C46B39ECB694180D0000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE77105270A1D4E45A3D4898353D52F890D573445F81914D96DBF5A9A7EA113564E344800000000000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000001984E432AD8FC018D9A49E14CCCD78612DDF5CA0000000000000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicDefinitionTransactionV1_mosaic_definition_single_1() {
        let input_payload = decode("96000000000000005D3116D285D4ED8883DBBBC8E59FED08A888DAB21C6E4B918434BE2B3AF1105EE1B94EAA9C4BB54428F4A71C711964F00848B9A9E00D8F55670991AADC16119FAFE26F6B9F61B0F1227A149D482D221B4D50F0FB780BC42D2DBA3FCD1F0250B90000000001984D41E0FEEEEFFEEEEFFEE0711EE7711EE7719AAEBB6AA74736151027000000000000000000000504").unwrap();
        let tx = MosaicDefinitionTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicDefinitionTransactionV1_mosaic_definition_single_2() {
        let input_payload = decode("9600000000000000D3B6BEF55F6D99281079B8A138EECE9A4CACC052BC3E84D83D72C3FCF0CFA85DEA390B8FCD50F1A6A6E196DDDED52CB92FC3C216C6B5F06F96E89B23FA62B4BEF4B720AE0148D769C0F4C73355BBA1987EC6FA38C1E13F342C27BD3D52E76E950000000001984D41E0FEEEEFFEEEEFFEE0711EE7711EE7719CBBDB70BCB8CB64E803000000000000E6DE84B80003").unwrap();
        let tx = MosaicDefinitionTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicDefinitionTransactionV1_mosaic_definition_single_3() {
        let input_payload = decode("96000000000000003712BC4F3932457AD1A7CC967CC45C3D5F04A52F6B802AEC7D377E504432F1DA40DD1EDAFE9F5899BD04DFBFB1324B198CCEE3344883DEA75DCCE2D1778B652903F1E5E2ACDCABFCCF3CAB57CA7EA14A27934C970F7BC6E110EEB3B3BA27EB580000000001984D41E0FEEEEFFEEEEFFEE0711EE7711EE771373C73AFF80478750000000000000000E6DE84B80A02").unwrap();
        let tx = MosaicDefinitionTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicDefinitionTransactionV1_mosaic_definition_aggregate_1() {
        let input_payload = decode("F00000000000000032D1342734620E653DE0D6987C77EBD99D8B9818E9BF20BB7E042BF96FD2A288CB16DA71B3D60AB7627DDD5C3BCEA5901DACBDAF42B55184C51D1F19E04C62ADC80426D92D5FCE5A233B28C9A667275421454FCEF354171A3D47BAB904B041650000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE771E22385E28D66F4A783AC56C45640070DB628B0A9192B1F773DED09C41123ADFA4800000000000000460000000000000000000000000000000000000000000000000000000000000000000000000000000000000001984D4101CE59EBE6B06F3210270000000000000000000005040000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicDefinitionTransactionV1_mosaic_definition_aggregate_2() {
        let input_payload = decode("F00000000000000015C8937E60CE6D6EBFC8CD244B3C617E92E45E5C386C2DC7F05010039DF9B95D65529BD7646A7772390ED95828F65792399C78C53B00F349F142B6FBBC749BF81DC7F9ACF33B0F3C8EFD4EEF6F3A2235763BCDC7443206CA77A3AE159EC067600000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE7719F08B173200F10F08F6FC4C6E1B37DAE1C3B425A98C8D1EB4B3BC44AF6B2906E4800000000000000460000000000000000000000000000000000000000000000000000000000000000000000000000000000000001984D41B685550629D42453E803000000000000E6DE84B800030000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicDefinitionTransactionV1_mosaic_definition_aggregate_3() {
        let input_payload = decode("F0000000000000004AEF7D973B45E8D60E030DDE3D6EEB6CDA947FA7663A87223B780A6E9F23C28FC78B196EFFF719894B4E09D223D77F2B87D7334C06F47D95762E284326D10ADC2BCD61B438EF36AF057DD6EA48110848BA1315559140E912D5C2FD4FFD1924E50000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE771D1C267AFAC897195F41696647A89AC5E0B75A0910D0F2A3DD404F93113C356334800000000000000460000000000000000000000000000000000000000000000000000000000000000000000000000000000000001984D41B685550629D424530000000000000000E6DE84B80A020000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicGlobalRestrictionTransactionV1_mosaic_global_restriction_single_1() {
        let input_payload = decode("AA00000000000000A70ECFC4FAD876EDD481D02AF560DBC319E6AAB21DD33A9095BD45B1A5994844527F5DDBE7C10AE28D960436ACD0D6076D3D9F7ABE9473832F2839FB3370B95A087129803C315CE139F50755066C0E09C16BC2F7577C16D896035EBAC88FA0BB0000000001985141E0FEEEEFFEEEEFFEE0711EE7711EE771077C47437698051A268025252B5EF26A0100000000000000090000000000000008000000000000000106").unwrap();
        let tx = MosaicGlobalRestrictionTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicGlobalRestrictionTransactionV1_mosaic_global_restriction_single_2() {
        let input_payload = decode("AA00000000000000BB9436193DB00910693878E9530966643BAB80AF00C026FD3FD85327422707AD2E5F21B890C22220BC510301F5DC8DE7FAC2445F7022B4B8DEDC5D751E95ADF165BC4608B8220C9E1AADFD8BCA1A813E0D67418A57664FF431FC1CD0803661CB0000000001985141E0FEEEEFFEEEEFFEE0711EE7711EE771513FEE4E65C1235600000000000000005C11000000000000000000000000000000000000000000000006").unwrap();
        let tx = MosaicGlobalRestrictionTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicGlobalRestrictionTransactionV1_mosaic_global_restriction_aggregate_1() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicGlobalRestrictionTransactionV1_mosaic_global_restriction_aggregate_2() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicMetadataTransactionV1_mosaic_metadata_single_1() {
        let input_payload = decode("B20000000000000021F6DF84B68468A19A0E204EFC45A826C02991737D0C3334F42CB64928D9537886359B83316B16060A859A5A2C1819CBC36FF520DF5F17D1529240F256CEA94C6693FC8E692C0848B0D0B0FAA89BE9D87FD6CB071642503A8F924F2A1255CD870000000001984442E0FEEEEFFEEEEFFEE0711EE7711EE7719841E5B8E40781CF74DABF592817DE48711D778648DEAFB20A00000000000000E8030000000000000A000600313233414243").unwrap();
        let tx = MosaicMetadataTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicMetadataTransactionV1_mosaic_metadata_single_2() {
        let input_payload = decode("B200000000000000EE4682A5FBE4BA1C8F8131DF3C0DF7BE4E8BAF0E3A2B2D288101F2C5261932F03E02FDC4207B5FD7E44A4771E6D3895388213C48789982B42AF05CDEB7F88E26ED1B9F006AFCAB3998EB0CE66E7D38D5F274097C8AC646CD08FD3DA5E81AAC8C0000000001984442E0FEEEEFFEEEEFFEE0711EE7711EE7719841E5B8E40781CF74DABF592817DE48711D778648DEAFB20A00000000000000E803000000000000FBFF0600313233414243").unwrap();
        let tx = MosaicMetadataTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicMetadataTransactionV1_mosaic_metadata_aggregate_1() {
        let input_payload = decode("10010000000000008EA0617C41D6BD51E768BCFA2A63F380E909BC8291F8BA1F4855D0C52EDFAA07EFD4DA8E20D3506CEBF72B8509B420447254300ABE817242B7D6D0D7C2B53221D3FBC7DA6B186EAE0A96D7895CC452BF5A1574877FCB4181EA868534AD040A3E0000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE771E2553E2E3FC4A959406B0F1AF9ADB9FC67D558615D523FD24119A7915FD0046868000000000000006200000000000000000000000000000000000000000000000000000000000000000000000000000000000000019844429841E5B8E40781CF74DABF592817DE48711D778648DEAFB20A00000000000000E8030000000000000A000600313233414243000000000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicMetadataTransactionV1_mosaic_metadata_aggregate_2() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicSupplyChangeTransactionV1_mosaic_supply_change_single_1() {
        let input_payload = decode("9100000000000000E2170899C9BFFDB63EA730C1EE0AA60A9AB086C9127242101ACF0DEFCEA8A31D9B4CA37B6644AC2B6928527338C1CB2C87EA4ADBD98A9EFAC34430B9245C6F9399A5B3328468287FF26BD7BD848F60077856DF7B648F877B4F35DA192933D0FF0000000001984D42E0FEEEEFFEEEEFFEE0711EE7711EE7718869746E9B1A70570A0000000000000001").unwrap();
        let tx = MosaicSupplyChangeTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicSupplyChangeTransactionV1_mosaic_supply_change_single_2() {
        let input_payload = decode("9100000000000000575F393E380C091DCC5729454D7B839D52158AD00CFD07A735F385DBC0574266EAD33478F15B0F38788437B0F9249A4732808002E23ADC95B9BA1F3F1B86A222B62BF0114C49516097675612B2625882AD4727A9D29712E38D60E457F71BB0FE0000000001984D42E0FEEEEFFEEEEFFEE0711EE7711EE7714CCCD78612DDF5CA0A0000000000000000").unwrap();
        let tx = MosaicSupplyChangeTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicSupplyChangeTransactionV1_mosaic_supply_change_aggregate_1() {
        let input_payload = decode("F000000000000000654E486DC8DB96B8C5307ABA03C65DEBD61270A24AFC473703D1FF1DB0B554C91945A07C6B1D77DE5F1406E8B48EE09480097F0402397A5AF925E3B00C091EAC902ED39C89FB419BC56EB091AF48DB37A601C7D00E53C1F901617886FD7B2D500000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE7716FFAC840B2C866960FCBCF42AF16B113FFE309A0991DFC0E4F3772E7AFC2FB694800000000000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000001984D428869746E9B1A70570A000000000000000100000000000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MosaicSupplyChangeTransactionV1_mosaic_supply_change_aggregate_2() {
        let input_payload = decode("F0000000000000008C31F816AE5EDBDCF507DF2F6E05CA7EDF4DE59AB8C3F67AA7474D44065A9E53618859CE09F2D76B92028EA267255B2DCCA6D1E0D7A10A5F3884F936883E25DF2A2DCED4834DEA7080D51288C0B6EDF62338D5BFDDEAAF92BF6879BAC28B49AE0000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE771137E5D6F7F63CCB9E2B51A4C22481D2766E8A4FCD6A387E667A35723F2C684284800000000000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000001984D424CCCD78612DDF5CA0A000000000000000000000000000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MultisigAccountModificationTransactionV1_multisig_account_modification_single_1() {
        let input_payload = decode("D0000000000000004E30A6E6477467C8314BEFF4922D58C33ED32AF351DD88640AF200EB4EE9C6FAD92B42D7FA236485F99D4D2C253993A66B2B00454A1159E71CBB3EB51394AC67A17456F637644D6F2E2DFD09CC8F5DE037F93829978949AD010FF6E9F5A0EBC60000000001985541E0FEEEEFFEEEEFFEE0711EE7711EE77101020201000000009841E5B8E40781CF74DABF592817DE48711D778648DEAFB298F409274B52FABBFBCF7E7DF7E20DE1D0C3F657FB8595C1989059321905F681BCF47EA33BBF5E6F8298B5440854FDED").unwrap();
        let tx = MultisigAccountModificationTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn MultisigAccountModificationTransactionV1_multisig_account_modification_aggregate_1() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn NamespaceMetadataTransactionV1_namespace_metadata_single_1() {
        let input_payload = decode("B200000000000000067D7153D66ED03E696208DAFB698C1EC0ECD92DA3AFEC180E082FA84133F1E5B9B0F0ACD14CEBE867DBA15DD37CB9CC413AAB3EF73E9929977337E6A8F2AB4432AA3E853021087C2DB1349483FED1C1A729A7F41B0BE84905D9E0463EEEC4170000000001984443E0FEEEEFFEEEEFFEE0711EE7711EE771989059321905F681BCF47EA33BBF5E6F8298B5440854FDED0A00000000000000E8030000000000000A000600414243313233").unwrap();
        let tx = NamespaceMetadataTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn NamespaceMetadataTransactionV1_namespace_metadata_single_2() {
        let input_payload = decode("B200000000000000FD0DDFDC372E15AE261A4AF8C61EFE37FAE5E4D6D8B6E53AA83ED616BD002C1700D2B594C841472C3DC24E4B74DE5E01968A943F8AE7BC34B9C59C9918DA2A4681C75ECF85231AA30DA72890D10825A7BB419044FE959DD13C9CDE850D9D43DC0000000001984443E0FEEEEFFEEEEFFEE0711EE7711EE771989059321905F681BCF47EA33BBF5E6F8298B5440854FDED0A00000000000000E803000000000000FDFF0600414243313233").unwrap();
        let tx = NamespaceMetadataTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn NamespaceMetadataTransactionV1_namespace_metadata_aggregate_1() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn NamespaceMetadataTransactionV1_namespace_metadata_aggregate_2() {
        let input_payload = decode("1001000000000000E241E4975832859BFC491EA4F2DABB1F29C984C0035D403C151CEBDB5DFB6F6FCDAFE7F79921213DBB0733C593CDF711E61CACE4A83877C1AFB2D0C2CF6A4E3C1623C5D275D0DFE188F944922E884A9C83E20E2ACA7555D4B79CBACA15CDB82F0000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE771A92D6804B56AF5C4439906441DEE2EC265756E9D95914230483A4D1BF6283C1D6800000000000000620000000000000000000000000000000000000000000000000000000000000000000000000000000000000001984443989059321905F681BCF47EA33BBF5E6F8298B5440854FDED0A00000000000000E803000000000000FDFF0600414243313233000000000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn NamespaceRegistrationTransactionV1_namespace_registration_single_1() {
        let input_payload = decode("9E000000000000006F81F080720F6F641386F1320BCD4B641345CA1D3FF4D7DE302B0EA28D0E8869F3FCC0BACD72C3FF897CB620ED6B713B07F68B6312428A3C6C09B88FCAD0789A02632A2AEB78C3155D3008461457706F2540EDD3F80264245A64EF82ACDEDF5A0000000001984E41E0FEEEEFFEEEEFFEE0711EE7711EE77110270000000000007EE9B3B8AFDF53C0000C6E65776E616D657370616365").unwrap();
        let tx = NamespaceRegistrationTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn NamespaceRegistrationTransactionV1_namespace_registration_single_2() {
        let input_payload = decode("9E0000000000000059C951AD8691705F1EB49D80B78B850B4114F38E0FCC64DAC404E9AA44DCBAA8A3DCFE82DF1275E278F8B8C98D3B83FB6328F257937AD4490B944C4AE27904B3D3AFA86AEDDE967FDD6663BAB6B64325700AD88C9C56CA6FC9CBC3D68233F1D40000000001984E41E0FEEEEFFEEEEFFEE0711EE7711EE7717EE9B3B8AFDF53400312981B7879A3F1010C7375626E616D657370616365").unwrap();
        let tx = NamespaceRegistrationTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn NamespaceRegistrationTransactionV1_namespace_registration_aggregate_1() {
        let input_payload = decode("F8000000000000004C08B813E15C24982EE1D908942CBC07F7EE373EB78F99935D657CAB1CE6397156FF07C97D334F8E2E71B57E293E98B0523633FF36C052E3AB0B5E3FF4924310FDE5BEA4E510DC5995F62232864A504F48DF767C84019CBEB5E5389F35E194110000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE77164148373332A1284E316AC070194019D786C29F3B879A0AAFACEC2E393D0FCB550000000000000004E0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001984E4110270000000000007EE9B3B8AFDF53C0000C6E65776E616D6573706163650000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn NamespaceRegistrationTransactionV1_namespace_registration_aggregate_2() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn NodeKeyLinkTransactionV1_node_key_link_single_1() {
        let input_payload = decode("A1000000000000003CCE9BCD544BFF665A3400F7337A5115307ABB490AD821B6EE8F2906805B4B4C7D525EC20B52B9F6D7FEAA0CC6C20E6A613F2395916AC07F4ACC34FAD57F177DB2ADB234491F5093B682643136119998A9960477391ACF84A0D003BDF7E7790D0000000001984C42E0FEEEEFFEEEEFFEE0711EE7711EE771E787EDC111A3A8E3E8C94DF66755065D66A34563ED09C83755C38C24D3B7F08A01").unwrap();
        let tx = NodeKeyLinkTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn NodeKeyLinkTransactionV1_node_key_link_aggregate_1() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn SecretLockTransactionV1_secret_lock_single_1() {
        let input_payload = decode("D1000000000000005E9808E11624AAABD2826CF7F464B93F309B8F15506BE6FC7E8C1E5E09E23B4D13A37C5982225413DDD6CA5913F4F4673662732059AD381DF191A01C72CB6D5D506A1C9364164E40422BDAC9135F19F6E3D186068F883FD9AF4C677D433C39A30000000001985241E0FEEEEFFEEEEFFEE0711EE7711EE7719841E5B8E40781CF74DABF592817DE48711D778648DEAFB23FC8BA10229AB5778D05D9C4B7F56676A88BF9295C185ACFC0F961DB5408CAFE44B262C46CEABB858096980000000000640000000000000000").unwrap();
        let tx = SecretLockTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn SecretLockTransactionV1_secret_lock_single_2() {
        let input_payload = decode("D1000000000000001F97199EAA5A7B3D956DE51DB9E93490A72123ECDC7C2931ED4B3EA9D02FD9443F9F5028B92D5CF5A32DD1F9802D0D5B703BE5FFFDB3480D0915C8BE7ABE62FD5D61CF2A251A2ADFD0788134F115C91734401A4F390941A5AE9D0B92AA2EA7520000000001985241E0FEEEEFFEEEEFFEE0711EE7711EE7719841E5B8E40781CF74DABF592817DE48711D778648DEAFB259CC35F8C8D91867717CE4290B40EA636E86CE5C00000000000000000000000044B262C46CEABB85EFCDAB9078563412640000000000000001").unwrap();
        let tx = SecretLockTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn SecretLockTransactionV1_secret_lock_aggregate_1() {
        let input_payload = decode("3001000000000000D2CECD95BAA2B1F170D2EA70E7EC4A32C6DF0813CCE37C900262BDF1A13E16EE9F54F1A9F31E80DC488D43EDBE3072103AA74B7E064EAEDEF5BAB348B45541E14191AD7B9C099B32159D5595EBF1A1274F0464690A4533FCA12379B9BD4E87950000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE77136927A7B0987EB9A13129BA53AC0597E96F9D8F2C8306EA3F750518ACD15529A88000000000000008100000000000000000000000000000000000000000000000000000000000000000000000000000000000000019852419841E5B8E40781CF74DABF592817DE48711D778648DEAFB23FC8BA10229AB5778D05D9C4B7F56676A88BF9295C185ACFC0F961DB5408CAFE44B262C46CEABB85809698000000000064000000000000000000000000000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn SecretLockTransactionV1_secret_lock_aggregate_2() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn SecretProofTransactionV1_secret_proof_single_1() {
        let input_payload = decode("BF00000000000000AF3DC7E901D3DBA59F26DB495339E55466C70DDAFD4993CFA437CC260C5829774A3A8891758C20D1E4432D53C9B23FD500972FB212325CC0160300BEE521B444E2E9B5CF15554F11A98A250167E936F731865F3318B41E9B18753BFE31A8E4D60000000001985242E0FEEEEFFEEEEFFEE0711EE7711EE771989059321905F681BCF47EA33BBF5E6F8298B5440854FDED3FC8BA10229AB5778D05D9C4B7F56676A88BF9295C185ACFC0F961DB5408CAFE0400009A493664").unwrap();
        let tx = SecretProofTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn SecretProofTransactionV1_secret_proof_aggregate_1() {
        let input_payload = decode("1801000000000000C7A226BE39161700A4EAAA38663DE7FD9A3ECDDB6D8AE5BE745FA97CAB9A994CD3B6AD7199C586EE62FB3A1860888B5306F34D6AA31D856B8DDBFBAA51E9A9245D84E89527FF5DBA39EA1B00B8230BB96AC13682FDD336DABD3BDA745F17C2CB0000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE7712082780E43D0C6AB646FF178295F5B7CE48B9DE845A3DA98EF595433BDA184E970000000000000006F0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001985242989059321905F681BCF47EA33BBF5E6F8298B5440854FDED3FC8BA10229AB5778D05D9C4B7F56676A88BF9295C185ACFC0F961DB5408CAFE0400009A49366400").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_single_1() {
        let input_payload = decode("B0000000000000002396B87D65DDDCF52F527CC4C8E2C413C52DA4E2D2D951E5EB1370941D86068688099761AD473A3D124650B823C39078B9326EC8CD050FE2EB6ABC9FE61C0212B9E7DC522F51BEA8AEF69B11BA0BE6461ED6877B2F7E82B45B7C28CE797381010000000001985441E0FEEEEFFEEEEFFEE0711EE7711EE771989059321905F681BCF47EA33BBF5E6F8298B5440854FDED0000010000000000672B0000CE5600006400000000000000").unwrap();
        let tx = TransferTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_single_2() {
        let input_payload = decode("C00000000000000042D030CD0166DA62C1DF1FF0945752475FBD2B4B975E9991EFF57BCD742C235787433B8AF428C3852009C8C63B632572057945118F393F4187FF51DFD77CAC6DBDEDB7F83716B5AC6B022AF175C00C011B42286618EF06BD3B1C35D2781286AA0000000001985441E0FEEEEFFEEEEFFEE0711EE7711EE771989059321905F681BCF47EA33BBF5E6F8298B5440854FDED000002000000000064000000000000000200000000000000C8000000000000000100000000000000").unwrap();
        let tx = TransferTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_single_3() {
        let input_payload = decode("D000000000000000C1DD9E45551CF35D8F058C73A8E3813B107A5D6EC6393F60B8B2F294E1C831FF96F30CB71D18EBEE2C96146D97DF1CFA252B8B3988697015150D7CDFEF8844638290EA0BC248DB72174B55D359861DFF4401DF075508FBC0C0C35515E4E3CD480000000001985441E0FEEEEFFEEEEFFEE0711EE7711EE771989059321905F681BCF47EA33BBF5E6F8298B5440854FDED0000030000000000BA36BD286FB7F2670300000000000000D787D9329996A177020000000000000029CF5FD941AD25D50100000000000000").unwrap();
        let tx = TransferTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_single_4() {
        let input_payload = decode("B0000000000000005A5763BD9CE487F745C0A5F4D2D2F4167778878C9C119B03C549F915ED471B6AD05F51A76C4CE9CC7BCF58958A6DC64B3C43584D1651B64FBBFCD42FCAD1DEBF7FB9B855A5A52B10C3FAF4670DCA953F10EFC223F0CC2483E1E69571889BF30C0000000001985441E0FEEEEFFEEEEFFEE0711EE7711EE771989059321905F681BCF47EA33BBF5E6F8298B5440854FDED1000000000000000D600000300504C5445000000FBAF93F7").unwrap();
        let tx = TransferTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_single_5() {
        let input_payload = decode("CE000000000000003CA4BBA1CFF24DEA27FD659AA48334DB71FF2E377F641E52773959C58B8A3F77E1255762A39097716FCA94CD55FFED106B8B4EFE69701484E05A184A4FEFFD037772B114A30ABE8A0CFF2BDEDDB022DD781E0B8503B28CD9B2EA4684EA9CB5530000000001985441E0FEEEEFFEEEEFFEE0711EE7711EE7719188DD7D72227ECAE70000000000000000000000000000001E0001000000000044B262C46CEABB8501000000000000004974277320736F6D65206B696E64206F66206D616769632C206D61676963").unwrap();
        let tx = TransferTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_single_6() {
        let input_payload = decode("CA0000000000000070E5416292032C453B628E6D8D8EFE8EF81C19AA054AD1C270B17E98B0993352B9A2627F5C944E49F01D479F3BB1B263D4516E6C63117DFA35EBBA9D30432EDE31F9D9D1465206B24E37FCE4F8D6DAC56A0C5B2A3C08A904F8D196442081485B0000000001985441E0FEEEEFFEEEEFFEE0711EE7711EE771989059321905F681BCF47EA33BBF5E6F8298B5440854FDED0A00020000000000671305C6390B00002C01000000000000672B0000CE560000640000000000000048656C6C6F20F09F918B").unwrap();
        let tx = TransferTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_single_7() {
        let input_payload = decode("D000000000000000D62C87F5719E3D2AAACB0ADA00678E0FBD040AB7B3D05C30DE7DC613834C45F3C491D61574DF3E368A27895FD494C0F0D83C6D32FA5916E6A7EE1466F4E6E4C6C25CFB2BC786BC391E6930112DE0347796FBFE0636712A6D6E5F0B94850B00850000000001985441E0FEEEEFFEEEEFFEE0711EE7711EE771989059321905F681BCF47EA33BBF5E6F8298B5440854FDED0000030000000000BA36BD286FB7F2670300000000000000D787D9329996A177020000000000000029CF5FD941AD25D50100000000000000").unwrap();
        let tx = TransferTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_aggregate_1() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_aggregate_2() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_aggregate_3() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_aggregate_4() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_aggregate_5() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_aggregate_6() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn TransferTransactionV1_transfer_aggregate_7() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn VotingKeyLinkTransactionV1_voting_key_link_single_1() {
        let input_payload = decode("A9000000000000002E2DA14AA2ED5E08B2BC7636A3F45E84B84C6968B70BB4064E4C8BE04971FBE4A87B64561B4F378D08FB60F24F2DF28932913364D7CFDF09BDDE75C635EB16B111FDBA708E5AC33B56F0F1BCB26095B88F26796CD422DAEFDC5DDF95C35B9D990000000001984341E0FEEEEFFEEEEFFEE0711EE7711EE7712132AD40276EDCA2CEC3948326B672F6FC873B9AA49FB22A49AFEA44612C4C96010000000300000001").unwrap();
        let tx = VotingKeyLinkTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn VotingKeyLinkTransactionV1_voting_key_link_single_2() {
        let input_payload = decode("A9000000000000004B8726EC5C6F5875707C8CE094880AD4CE0882B34AE4BEFE244C33C2A8FD8A4B4A6A2BDE2B56C84471A69160B1A24B1AD328F86876F39FB4B7D1A2CDB55CA4943B7057FDCC87575F139CED264ABA3A9AD0842990CE35D25C5FF84C86E6BC98350000000001984341E0FEEEEFFEEEEFFEE0711EE7711EE771E787EDC111A3A8E3E8C94DF66755065D66A34563ED09C83755C38C24D3B7F08ACD0000001001000000").unwrap();
        let tx = VotingKeyLinkTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn VotingKeyLinkTransactionV1_voting_key_link_aggregate_1() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn VotingKeyLinkTransactionV1_voting_key_link_aggregate_2() {
        let input_payload = decode("0801000000000000CB5E0C56862D705FDB3AFBDA7399365F0259ECC36377D19FBC154D94C18E337C9183A2B911BE690AF2FAC22C1C65821749E37CF475EFE6C14DEAB991ACBAFE7CE3FDC02C34AF20D6E93DEB083D2150501A2A1B87FC4A412DCEC234884187B9360000000002984142E0FEEEEFFEEEEFFEE0711EE7711EE7717BEFAC9DE1ED91FF6A7F9252CBDF9825C5DEF3D65EBC9CE6D07475854D69978C6000000000000000590000000000000000000000000000000000000000000000000000000000000000000000000000000000000001984341E787EDC111A3A8E3E8C94DF66755065D66A34563ED09C83755C38C24D3B7F08ACD000000100100000000000000000000").unwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn VrfKeyLinkTransactionV1_vrf_key_link_single_1() {
        let input_payload = decode("A10000000000000038F64BB69857DF898DF5D551032AA4BBFA454B3235F5915CEBED82C85BE69E7C7D06443763551A4E68CDA17AEC2BF9A74CB5F85A6D0474E7CA7B804F55AF8EDBA00FF1F8249F64D7E3A55DA214E5D47BE7A9A906CC4E9D47A934FB8328FA2C060000000001984342E0FEEEEFFEEEEFFEE0711EE7711EE771E787EDC111A3A8E3E8C94DF66755065D66A34563ED09C83755C38C24D3B7F08A01").unwrap();
        let tx = VrfKeyLinkTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn VrfKeyLinkTransactionV1_vrf_key_link_single_2() {
        let input_payload = decode("A10000000000000083FC771045460B0545CA4C27C00A595D21418F34E056F299732CD759C9C0A268D0395222D79F0EEB392D3F5AC0A0FAEAFE231CC0C5F7187F99CAAF74DECC13E3D1B135019A0C6B06AF89045337CA791B8D0FB8B4AEE6C16331D9EA259C069FDA0000000001984342E0FEEEEFFEEEEFFEE0711EE7711EE7712132AD40276EDCA2CEC3948326B672F6FC873B9AA49FB22A49AFEA44612C4C9600").unwrap();
        let tx = VrfKeyLinkTransactionV1::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn VrfKeyLinkTransactionV1_vrf_key_link_aggregate_1() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }

    #[test]
    #[allow(non_snake_case)]
    fn VrfKeyLinkTransactionV1_vrf_key_link_aggregate_2() {
        let input_payload = decodeunwrap();
        let tx = AggregateBondedTransactionV2::deserialize(&input_payload)
            .unwrap()
            .0;
        let output_payload = tx.serialize();
        assert_eq!(input_payload, output_payload);
    }
}
