use hex::decode;
use std::str::FromStr;

use symbol::symbol::prelude::*;

#[test]
#[cfg(not(feature = "private_network"))]
fn my_test() {
    // let mut a = AccountAddressRestrictionTransactionV1::new(
    //     PublicKey::from_str("D294E5E650ACC2A911B548BE2A1806FF4717621BCE3EC1007295219AFFC17B82")
    //         .unwrap(),
    //     NetworkType::TESTNET,
    //     Amount(18370164183782063840),
    //     Timestamp(8207562320463688160),
    //     AccountRestrictionFlags::ADDRESS,
    //     vec![
    //         UnresolvedAddress::from_str("TBA6LOHEA6A465G2X5MSQF66JBYR254GJDPK7MQ").unwrap(),
    //         UnresolvedAddress::from_str("TD2ASJ2LKL5LX66PPZ67PYQN4HIMH5SX7OCZLQI").unwrap(),
    //     ],
    //     vec![UnresolvedAddress::from_str("TCIFSMQZAX3IDPHUP2RTXP26N6BJRNKEBBKP33I").unwrap()],
    // );
    // let signature = Signature::from_str("7695D855CBB6CB83D5BD08E9D76145674F805D741301883387B7101FD8CA84329BB14DBF2F0B4CD58AA84CF31AC6899D134FC38FAB0E7A76F6216ACD60914ACB").unwrap();
    // a.set_signature(signature);

    // let payload = "D0000000000000007695D855CBB6CB83D5BD08E9D76145674F805D741301883387B7101FD8CA84329BB14DBF2F0B4CD58AA84CF31AC6899D134FC38FAB0E7A76F6216ACD60914ACBD294E5E650ACC2A911B548BE2A1806FF4717621BCE3EC1007295219AFFC17B820000000001985041E0FEEEEFFEEEEFFEE0711EE7711EE77101000201000000009841E5B8E40781CF74DABF592817DE48711D778648DEAFB298F409274B52FABBFBCF7E7DF7E20DE1D0C3F657FB8595C1989059321905F681BCF47EA33BBF5E6F8298B5440854FDED";
    // let b = a.serialize();
    // dbg!(a.size(), b.len(), decode(payload).unwrap().len());
    // dbg!(a);
    // assert_eq!(b, decode(payload).unwrap());

    let a = PublicKey::default();
    dbg!(a);
    let a = PublicKey::from_str("0000000000000000000000000000000000000000000000000000000000000000")
        .unwrap();
    let a = PublicKey::from_str("76E94661562762111FF7E592B00398554973396D8A4B922F3E3D139892F7C35C")
        .unwrap();

    // let payload = decode("D0000000000000007695D855CBB6CB83D5BD08E9D76145674F805D741301883387B7101FD8CA84329BB14DBF2F0B4CD58AA84CF31AC6899D134FC38FAB0E7A76F6216ACD60914ACBD294E5E650ACC2A911B548BE2A1806FF4717621BCE3EC1007295219AFFC17B820000000001985041E0FEEEEFFEEEEFFEE0711EE7711EE77101000201000000009841E5B8E40781CF74DABF592817DE48711D778648DEAFB298F409274B52FABBFBCF7E7DF7E20DE1D0C3F657FB8595C1989059321905F681BCF47EA33BBF5E6F8298B5440854FDED").unwrap();
    // let a = AccountAddressRestrictionTransactionV1::deserialize(&payload).unwrap().0;
    // dbg!(&a);

    // test_name: AccountAddressRestrictionTransactionV1_account_address_restriction_aggregate_1
    let payload = decodeunwrap();
    let tx = AggregateBondedTransactionV2::deserialize(&payload)
        .unwrap()
        .0;
}
